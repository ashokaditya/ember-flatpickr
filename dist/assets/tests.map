{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/ember-basic-dropdown.js","dummy/tests/helpers/ember-power-select.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/integration/components/ember-flatpickr-test.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  var run = Ember.run;\n  function destroyApp(application) {\n    run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/ember-basic-dropdown', ['exports', 'ember-basic-dropdown/test-support/helpers', 'ember-native-dom-helpers'], function (exports, _helpers, _emberNativeDomHelpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.nativeClick = exports.fireKeydown = exports.tapTrigger = exports.clickTrigger = exports.nativeTap = undefined;\n  Object.defineProperty(exports, 'nativeTap', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeTap;\n    }\n  });\n  Object.defineProperty(exports, 'clickTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.clickTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'tapTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.tapTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'fireKeydown', {\n    enumerable: true,\n    get: function () {\n      return _helpers.fireKeydown;\n    }\n  });\n  exports.default = _helpers.default;\n  var nativeClick = exports.nativeClick = _emberNativeDomHelpers.click;\n});","define('dummy/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  Object.defineProperty(exports, 'findContains', {\n    enumerable: true,\n    get: function () {\n      return _helpers.findContains;\n    }\n  });\n  Object.defineProperty(exports, 'nativeMouseDown', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeMouseDown;\n    }\n  });\n  Object.defineProperty(exports, 'nativeMouseUp', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeMouseUp;\n    }\n  });\n  Object.defineProperty(exports, 'triggerKeydown', {\n    enumerable: true,\n    get: function () {\n      return _helpers.triggerKeydown;\n    }\n  });\n  Object.defineProperty(exports, 'typeInSearch', {\n    enumerable: true,\n    get: function () {\n      return _helpers.typeInSearch;\n    }\n  });\n  Object.defineProperty(exports, 'clickTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.clickTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'nativeTouch', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeTouch;\n    }\n  });\n  Object.defineProperty(exports, 'touchTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.touchTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'selectChoose', {\n    enumerable: true,\n    get: function () {\n      return _helpers.selectChoose;\n    }\n  });\n  exports.default = _helpers.default;\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('dummy/tests/helpers/start-app', ['exports', 'dummy/app', 'dummy/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  var merge = Ember.merge;\n  var run = Ember.run;\n  function startApp(attrs) {\n    var attributes = merge({}, _environment.default.APP);\n    attributes = merge(attributes, attrs); // use defaults, but you can override;\n\n    return run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('dummy/tests/integration/components/ember-flatpickr-test', ['ember-native-dom-helpers', 'ember-qunit'], function (_emberNativeDomHelpers, _emberQunit) {\n  'use strict';\n\n  var run = Ember.run;\n\n\n  (0, _emberQunit.moduleForComponent)('ember-flatpickr', 'Integration | Component | ember flatpickr', {\n    integration: true\n  });\n\n  function clickDay(index) {\n    (0, _emberNativeDomHelpers.triggerEvent)((0, _emberNativeDomHelpers.findAll)('.flatpickr-days .flatpickr-day')[index], 'mousedown');\n  }\n\n  function closeFlatpickr() {\n    (0, _emberNativeDomHelpers.triggerEvent)(document, 'mousedown');\n  }\n\n  (0, _emberQunit.test)('disabled is updated when altInput=true', function (assert) {\n    var _this = this;\n\n    assert.expect(4);\n\n    var originalDate = '2080-12-05T20:00:00.000Z';\n    this.set('dateValue', [new Date(originalDate)]);\n    this.set('disabled', true);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"9v9ztCGj\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"altInput\\\",\\\"date\\\",\\\"disabled\\\",\\\"onChange\\\",\\\"placeholder\\\"],[true,[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],[19,0,[\\\"disabled\\\"]],null,\\\"Pick date\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    run(function () {\n      assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-input[type=\"hidden\"]').disabled, false, 'hidden input not disabled');\n      assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-input[type=\"text\"]').disabled, true, 'text input is disabled');\n\n      _this.set('disabled', false);\n\n      assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-input[type=\"hidden\"]').disabled, false, 'hidden input not disabled');\n      assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-input[type=\"text\"]').disabled, false, 'text input not disabled');\n    });\n  });\n\n  (0, _emberQunit.test)('disabled is updated when altInput=false', function (assert) {\n    var _this2 = this;\n\n    assert.expect(3);\n\n    var originalDate = '2080-12-05T20:00:00.000Z';\n    this.set('dateValue', [new Date(originalDate)]);\n    this.set('disabled', true);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"J0tjbv2P\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"altInput\\\",\\\"date\\\",\\\"disabled\\\",\\\"onChange\\\",\\\"placeholder\\\"],[false,[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],[19,0,[\\\"disabled\\\"]],null,\\\"Pick date\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    run(function () {\n      assert.notOk((0, _emberNativeDomHelpers.find)('.flatpickr-input[type=\"hidden\"]'), 'hidden input does not exist');\n      assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-input[type=\"text\"]').disabled, true, 'text input is disabled');\n\n      _this2.set('disabled', false);\n\n      assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-input[type=\"text\"]').disabled, false, 'text input not disabled');\n    });\n  });\n\n  (0, _emberQunit.test)('value updates when set externally via flatpickrRef', function (assert) {\n    assert.expect(2);\n\n    this.on('onChange', function () {});\n\n    this.set('dateValue', '2080-12-01T16:16:22.585Z');\n    this.set('maxDate', '2080-12-31T16:16:22.585Z');\n    this.set('minDate', '2080-12-01T16:16:22.585Z');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"zE4YhQ8r\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"date\\\",\\\"flatpickrRef\\\",\\\"maxDate\\\",\\\"minDate\\\",\\\"onChange\\\",\\\"placeholder\\\"],[[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],[19,0,[\\\"flatpickrRef\\\"]],[19,0,[\\\"maxDate\\\"]],[19,0,[\\\"minDate\\\"]],\\\"onChange\\\",\\\"Pick date\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-days .flatpickr-day.selected').textContent, '1', 'initial selected date text');\n\n    this.get('flatpickrRef').setDate('2080-12-04T16:16:22.585Z');\n\n    assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-days .flatpickr-day.selected').textContent, '4', 'selected changes with dateValue');\n  });\n\n  (0, _emberQunit.test)('onChange action fired', function (assert) {\n    assert.expect(1);\n\n    this.set('dateValue', null);\n\n    var done = assert.async();\n\n    this.on('onChange', function (selectedDates) {\n      setTimeout(function () {\n        assert.equal(selectedDates[0].toISOString().substring(0, 10), '2080-12-06', 'onChange action was executed');\n        done();\n      }, 100);\n    });\n\n    this.set('maxDate', '2080-12-31T16:16:22.585Z');\n    this.set('minDate', '2080-12-01T16:16:22.585Z');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yfREeOmY\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"appendDataInput\\\",\\\"date\\\",\\\"enableTime\\\",\\\"maxDate\\\",\\\"minDate\\\",\\\"onChange\\\",\\\"placeholder\\\"],[true,[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],true,[19,0,[\\\"maxDate\\\"]],[19,0,[\\\"minDate\\\"]],\\\"onChange\\\",\\\"Pick date\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    run(function () {\n      (0, _emberNativeDomHelpers.find)('.flatpickr-input').dispatchEvent(new Event('focus'));\n      clickDay(5);\n    });\n  });\n\n  (0, _emberQunit.test)('onClose action fired', function (assert) {\n    assert.expect(1);\n\n    this.set('dateValue', null);\n\n    this.on('onClose', function () {\n      assert.ok(true, 'onClose action was executed');\n    });\n\n    this.set('maxDate', '2080-12-31T16:16:22.585Z');\n    this.set('minDate', '2080-12-01T16:16:22.585Z');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"mEE1qE5B\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"appendDataInput\\\",\\\"date\\\",\\\"enableTime\\\",\\\"maxDate\\\",\\\"minDate\\\",\\\"onChange\\\",\\\"onClose\\\",\\\"placeholder\\\"],[true,[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],true,[19,0,[\\\"maxDate\\\"]],[19,0,[\\\"minDate\\\"]],null,\\\"onClose\\\",\\\"Pick date\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    run(function () {\n      (0, _emberNativeDomHelpers.find)('.flatpickr-input').dispatchEvent(new Event('focus'));\n      closeFlatpickr();\n    });\n  });\n\n  (0, _emberQunit.test)('maxDateUpdated and minDateUpdated fired', function (assert) {\n    var _this3 = this;\n\n    assert.expect(3);\n\n    this.set('dateValue', null);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"mEE1qE5B\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"appendDataInput\\\",\\\"date\\\",\\\"enableTime\\\",\\\"maxDate\\\",\\\"minDate\\\",\\\"onChange\\\",\\\"onClose\\\",\\\"placeholder\\\"],[true,[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],true,[19,0,[\\\"maxDate\\\"]],[19,0,[\\\"minDate\\\"]],null,\\\"onClose\\\",\\\"Pick date\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    this.set('maxDate', '2080-12-25T16:16:22.585Z');\n    this.set('minDate', '2080-12-24T16:16:22.585Z');\n\n    run(function () {\n      (0, _emberNativeDomHelpers.find)('.flatpickr-input').dispatchEvent(new Event('focus'));\n      run.scheduleOnce('afterRender', _this3, function () {\n        var enabledDays = (0, _emberNativeDomHelpers.findAll)('.flatpickr-days .flatpickr-day:not(.disabled)');\n        assert.equal(enabledDays.length, 2);\n        assert.equal(enabledDays[0].textContent, '24');\n        assert.equal(enabledDays[1].textContent, '25');\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('locale works correctly', function (assert) {\n    assert.expect(1);\n\n    this.on('onChange', function () {});\n\n    this.set('dateValue', '2080-12-01T16:16:22.585Z');\n    this.set('maxDate', '2080-12-31T16:16:22.585Z');\n    this.set('minDate', '2080-12-01T16:16:22.585Z');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tEgfGkAx\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"date\\\",\\\"locale\\\",\\\"maxDate\\\",\\\"minDate\\\",\\\"onChange\\\",\\\"placeholder\\\"],[[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],\\\"fr\\\",[19,0,[\\\"maxDate\\\"]],[19,0,[\\\"minDate\\\"]],\\\"onChange\\\",\\\"Pick date\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-current-month .cur-month').textContent.trim(), 'Décembre', 'French locale applied successfully');\n  });\n\n  (0, _emberQunit.test)('onChange triggers value change only once', function (assert) {\n    var _this4 = this;\n\n    assert.expect(3);\n\n    var originalPosition = '1';\n    var originalDate = '2080-12-01T20:00:00.000Z';\n    var newPosition = '5';\n\n    this.on('onChange', function (selectedDates) {\n      assert.ok(selectedDates[0].toISOString(), 'onChange action was executed');\n\n      _this4.set('dateValue', selectedDates[0]);\n    });\n\n    this.set('dateValue', originalDate);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"e5Kd30Hi\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"date\\\",\\\"onChange\\\",\\\"placeholder\\\"],[[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],\\\"onChange\\\",\\\"Pick date\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    run(function () {\n      assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-days .flatpickr-day.selected').textContent, originalPosition, 'initial selected date text');\n\n      (0, _emberNativeDomHelpers.find)('.flatpickr-input').dispatchEvent(new Event('focus'));\n      clickDay(newPosition - 1);\n\n      assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-days .flatpickr-day.selected').textContent, newPosition, 'selected changes with dateValue');\n    });\n  });\n\n  (0, _emberQunit.test)('onChange gets called with the correct parameters', function (assert) {\n    var originalPosition = '1';\n    var originalDate = '2080-12-01T20:00:00.000Z';\n    var newPosition = '5';\n    var dateFormat = 'Y-m-d';\n    var newFormattedDate = '2080-12-05';\n\n    this.on('onChange', function (selectedDates, dateStr, instance) {\n      assert.ok(selectedDates instanceof Array, 'selectedDates is an array');\n      assert.equal(selectedDates.length, 1, 'selectedDates contains a single entry');\n\n      assert.ok(selectedDates[0] instanceof Date, 'selectedDates contains DateObjects');\n\n      assert.equal(selectedDates[0].toDateString(), 'Thu Dec 05 2080', 'selectedDates contains the correct Date');\n\n      assert.equal(dateStr, newFormattedDate, 'dateStr is formatted correctly');\n\n      assert.ok(instance instanceof FlatpickrInstance, 'instance is a FlatpickrInstance object');\n    });\n\n    this.set('dateValue', originalDate);\n    this.set('dateFormat', dateFormat);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tDZBjo+j\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"dateFormat\\\",\\\"date\\\",\\\"onChange\\\",\\\"placeholder\\\"],[[19,0,[\\\"dateFormat\\\"]],[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],\\\"onChange\\\",\\\"Pick date\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    run(function () {\n      assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-days .flatpickr-day.selected').textContent, originalPosition, 'initial selected date text');\n\n      (0, _emberNativeDomHelpers.find)('.flatpickr-input').dispatchEvent(new Event('focus'));\n      clickDay(newPosition - 1);\n\n      assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-days .flatpickr-day.selected').textContent, newPosition, 'selected changes with dateValue');\n\n      (0, _emberNativeDomHelpers.find)('.flatpickr-input').dispatchEvent(new Event('focus'));\n      clickDay(newPosition - 1);\n\n      assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-days .flatpickr-day.selected').textContent, newPosition, 'selected changes with dateValue');\n    });\n  });\n\n  (0, _emberQunit.test)('onChange action mut helper returns date Array', function (assert) {\n    var _this5 = this;\n\n    assert.expect(5);\n\n    var originalPosition = '1';\n    var originalDate = '2080-12-01T20:00:00.000Z';\n    var newPosition = '5';\n\n    this.set('dateValue', originalDate);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"H29M1nvR\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"date\\\",\\\"onChange\\\",\\\"placeholder\\\"],[[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],[25,\\\"action\\\",[[19,0,[]],[25,\\\"mut\\\",[[19,0,[\\\"dateValue\\\"]]],null]],null],\\\"Pick date\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    run(function () {\n      assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-days .flatpickr-day.selected').textContent, originalPosition, 'initial selected date text');\n\n      (0, _emberNativeDomHelpers.find)('.flatpickr-input').dispatchEvent(new Event('focus'));\n      clickDay(newPosition - 1);\n\n      assert.equal((0, _emberNativeDomHelpers.find)('.flatpickr-days .flatpickr-day.selected').textContent, newPosition, 'selected changes with dateValue');\n\n      assert.ok(_this5.get('dateValue') instanceof Array, 'dateValue is instanceof Array');\n      assert.ok(_this5.get('dateValue').length, 1, 'dateValue has 1 item');\n      assert.ok(_this5.get('dateValue')[0] instanceof Date, 'dateValue is an array of DateObjects');\n    });\n  });\n\n  (0, _emberQunit.test)('value accepts string', function (assert) {\n    var _this6 = this;\n\n    assert.expect(2);\n\n    var originalDate = '2080-12-05T20:00:00.000Z';\n\n    this.set('dateValue', originalDate);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"KWdKCPBc\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"date\\\",\\\"onChange\\\",\\\"placeholder\\\",\\\"flatpickrRef\\\"],[[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],[25,\\\"action\\\",[[19,0,[]],[25,\\\"mut\\\",[[19,0,[\\\"dateValue\\\"]]],null]],null],\\\"Pick date\\\",[19,0,[\\\"flatpickrRef\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    run(function () {\n      assert.equal(_this6.get('flatpickrRef').selectedDates.length, 1, '1 date is selected');\n      assert.equal(_this6.get('flatpickrRef').selectedDates[0].valueOf(), new Date(originalDate).valueOf(), 'selected date is correct');\n    });\n  });\n\n  (0, _emberQunit.test)('value accepts date object', function (assert) {\n    var _this7 = this;\n\n    assert.expect(2);\n\n    var originalDate = '2080-12-05T20:00:00.000Z';\n\n    this.set('dateValue', new Date(originalDate));\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"KWdKCPBc\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"date\\\",\\\"onChange\\\",\\\"placeholder\\\",\\\"flatpickrRef\\\"],[[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],[25,\\\"action\\\",[[19,0,[]],[25,\\\"mut\\\",[[19,0,[\\\"dateValue\\\"]]],null]],null],\\\"Pick date\\\",[19,0,[\\\"flatpickrRef\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    run(function () {\n      assert.equal(_this7.get('flatpickrRef').selectedDates.length, 1, '1 date is selected');\n      assert.equal(_this7.get('flatpickrRef').selectedDates[0].valueOf(), new Date(originalDate).valueOf(), 'selected date is correct');\n    });\n  });\n\n  (0, _emberQunit.test)('value accepts array of string', function (assert) {\n    var _this8 = this;\n\n    assert.expect(2);\n\n    var originalDate = '2080-12-05T20:00:00.000Z';\n\n    this.set('dateValue', [originalDate]);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"KWdKCPBc\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"date\\\",\\\"onChange\\\",\\\"placeholder\\\",\\\"flatpickrRef\\\"],[[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],[25,\\\"action\\\",[[19,0,[]],[25,\\\"mut\\\",[[19,0,[\\\"dateValue\\\"]]],null]],null],\\\"Pick date\\\",[19,0,[\\\"flatpickrRef\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    run(function () {\n      assert.equal(_this8.get('flatpickrRef').selectedDates.length, 1, '1 date is selected');\n      assert.equal(_this8.get('flatpickrRef').selectedDates[0].valueOf(), new Date(originalDate).valueOf(), 'selected date is correct');\n    });\n  });\n\n  (0, _emberQunit.test)('value accepts array of date objects', function (assert) {\n    var _this9 = this;\n\n    assert.expect(2);\n\n    var originalDate = '2080-12-05T20:00:00.000Z';\n    this.set('dateValue', [new Date(originalDate)]);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"KWdKCPBc\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"ember-flatpickr\\\",null,[[\\\"date\\\",\\\"onChange\\\",\\\"placeholder\\\",\\\"flatpickrRef\\\"],[[25,\\\"readonly\\\",[[19,0,[\\\"dateValue\\\"]]],null],[25,\\\"action\\\",[[19,0,[]],[25,\\\"mut\\\",[[19,0,[\\\"dateValue\\\"]]],null]],null],\\\"Pick date\\\",[19,0,[\\\"flatpickrRef\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    run(function () {\n      assert.equal(_this9.get('flatpickrRef').selectedDates.length, 1, '1 date is selected');\n      assert.equal(_this9.get('flatpickrRef').selectedDates[0].valueOf(), new Date(originalDate).valueOf(), 'selected date is correct');\n    });\n  });\n});","define('dummy/tests/test-helper', ['dummy/config/environment', 'dummy/tests/helpers/resolver', 'ember-qunit', 'ember-native-dom-helpers', 'ember-cli-qunit'], function (_environment, _resolver, _emberQunit, _emberNativeDomHelpers, _emberCliQunit) {\n  'use strict';\n\n  var rootElement = _environment.default.APP.rootElement;\n\n  _emberNativeDomHelpers.settings.rootElement = rootElement || _emberNativeDomHelpers.settings.rootElement;\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('dummy/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ember-flatpickr-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ember-flatpickr-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjCA;AACA;","file":"tests.js"}